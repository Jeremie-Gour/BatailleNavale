@startuml
'https://plantuml.com/class-diagram


package BatailleNavale{
    enum Alignement{
        HORIZONTAL
        VERTICAL
    }

    class Cellule{
         #TypeCellule typeCellule

         + void estOccupeeParNavire()
         + void estOccupee()
    }

    enum Colonne{
           -colonne: Integer
           A(0)
           B(1)
           C(2)
           D(3)
           E(4)
           F(5)
           G(6)
           H(7)
           I(8)
           J(9)
    }


    class Coordonne{
            -int: rangee
            -int: colonne
            + void deplacerEnbas()
            +void deplacerEnBas(distance)
            +void deplacerEnHaut()
            +void deplacerEnHaut(distance)
            +void deplacerAGauche(distance)
              +void deplacerADroite(distance)
              + boolean equals(Object objet)
    }

    enum Difficulte{
        FACILE(1)
        INTERMEDIAIRE(2)
        DIFFICILE(3)
        - difficulte: Integer
    }

    class Flotte{
        - listeNavires: List<Navire>
    }

    class MultiOutputStream{
        # outputStreams: Outputstream[]
        +void write()
        +flush()
        +close()
    }

   class OceanAffichage{
               +void afficherOcean()
                +void afficherOceanMasque()
    }
    class Navire{
         +private typeNavire: TypeNavire
    }

    class Ocean{
            -{static} TAILLE_HORIZONTALE_MAX: Integer = 10
            -{static} TAILLE_HORIZONTALE_MAX: Integer = 10
            #flotte: Flotte
            + ocean: Cellule[][]

            +void placerNaviresAleatoirement()
            +boolean verifierBateau()
            +void placerNavire()
            +TypeCellule tirer(Coordonnee coordonnee)
            +boolean placerBombe(Coordonne coordonnee)
    }



    class Ordinateur{
        -{static} TAILLE_HORIZONTALE_MAX: Integer = 10
                    -{static} TAILLE_HORIZONTALE_MAX: Integer = 10
                    - {static} alignementRepere: Alignement
                    - {static} pas: Integer
                    - {static} coordonnePivot: Coordonne
        - coordonneesDisponiblesIntelligent: List<ArrayList<Coordonnee>>
        - derniereCoordonneeAttaquee: Coordonne


    }
    class Partie{
        +void jouerPartie()
        +void Main()
    }

    class Saisie{
        +{static} TypeDocument SaisirTypeDocument()
        +{static} Difficulte saisirNiveauDifficulte()
        +{static} boolean avecBombe()
        +{static} Coordonnee saisirBombe()
        +{static} String saisirNavire(Navire navire)
        +{static} Alignement determinerAlignement(char alignement)
        +{static} Coordonnee saisirTir()
        +{static} afficherGagnant(boolean humain, boolean ordinateur)

    }
    enum Strategie{
        RECHERCHERBATEAU
        CHERCHERALIGNEMENT
        SUIVREALIGNEMENT
        VERIFIERAUTREBOUT
    }

    enum TypeCellule{
        NAVIREINTACT('N')
        NAVIRETOUCHE('o')
        NAVIRECOULE('#')
        NAVIRERATE('x')
        EAU('~')
        BOMBE('!')
        -icon: Character
    }

    enum TypeDocument{
        TEXTE("sauvegarde.txt")
        XML("sauvegarde.xml")
        JSON("sauvegarde.json")
        -_typeDocument: String
        +{static} void recording(TypeDocument typeDocument)
    }
    enum TypeNavire{
        PORTEAVIONS(5)
        CROISEUR(4)
        CONTRETORPILLEUR(3)
        TORPILLEUR(2)
        - taille: Integer
        +String toString()
    }

}

package Tests{
    class CelluleTest{
    }

    class ColonneTest{
    }

    class OceanTest{
    }

    class OrdinateurTest{
    }

    class TypeDocumentTest{
    }

    class SaisieTest{
    }
}

Cellule "1" -- "1" Coordonne

BatailleNavale -- Tests


Partie "1" <-left-* "1" TypeDocument

Strategie "1" <--* "1" Ordinateur

Partie ..right..> "uses" Saisie

Ordinateur <.."uses" Partie
OceanAffichage <.. "uses" Ocean

Partie "1" --o "2" Ocean

Ocean -- "une flotte est sur l'ocean" Flotte


Flotte "1" *-- "1..*" Navire

Cellule "1" *--> "1" TypeCellule


Ocean "1" *-- "1...*" Cellule




Colonne "1" <-left-* "1" Coordonne



Partie "1" <-up-* "1" Difficulte

Navire "1" *--> "1" TypeNavire

MultiOutputStream --- Partie

Navire "1" *--> "1" Alignement
@enduml